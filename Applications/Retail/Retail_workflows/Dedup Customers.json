{"name":"Dedup Customers","uuid":"2c65453c-624c-4ac7-8743-ab136defc8b8","category":"Dedup","description":"Finding the similar users in two different data sets.","parameters":"-","nodes":[{"id":"3","name":"JoinUsingColumn","description":"This node joins the incoming dataframes on a joinCol","details":"","examples":"","type":"join","nodeClass":"fire.nodes.etl.NodeJoinUsingColumn","x":"274.969px","y":"224.625px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"joinCol","value":"state","widget":"textfield","title":"Join Column","description":"column on which to join","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"4","name":"ColumnFilter","description":"This node creates a new DataFrame that contains only the selected columns","details":"","examples":"","type":"transform","nodeClass":"fire.nodes.etl.NodeColumnFilter","x":"288.656px","y":"48.3056px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputCols","value":"[\"first_name\",\"last_name\",\"err_first_name\",\"err_last_name\"]","widget":"variables","title":"Columns","description":"Columns to be included in the output DataFrame","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"5","name":"Dedup","description":"This node is used for problems like entity resolution or data matching. Entity resolution or Data matching is the problem of finding and linking different mentions of the same entity in a single data source or across multiple data sources.","details":"\u003ch2\u003eLevenstein\u003c/h2\u003e\n\u003cbr\u003e\nThe Levenshtein distance between two strings is defined as the minimum number of edits needed to transform one string into the other, with the allowable edit operations being insertion, deletion, or substitution of a single character.\u003cbr\u003e\n\u003cbr\u003e\nHow many char you change to make two strings equal.\u003cbr\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003ch2\u003eJaroWinker\u003c/h2\u003e\n\u003cbr\u003e\nJaro–Winkler distance for two strings is, the more similar the strings are. The Jaro–Winkler distance metric is designed and best suited for short strings such as person names. The score is normalized such that 0 equates to no similarity and 1 is an exact match.\u003cbr\u003e\n\u003cbr\u003e\nGood for short words, typos and nikename.\u003cbr\u003e\n\u003cbr\u003e\n\u003ch2\u003e Fullmatch\u003c/h2\u003e\n\u003cbr\u003e\nFullmatch distance for two strings is, how two strings are match exactly. The score is assigned such that 1 is for exact match and 0 is for not match.\u003cbr\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003ch2\u003eJaccard\u003c/h2\u003e\n\u003cbr\u003e\nThe Jaccard similarity measures similarity between finite sample sets, and is defined as the cardinality of the intersection of sets divided by the cardinality of the union of the sample sets. Suppose you want to find jaccard similarity between two sets A and B it is the ration of cardinality of A ∩ B and A ∪ B.\u003cbr\u003e\n\u003cbr\u003e\nSparkflows provide default 3-gram Jaccard similarity measures.\u003cbr\u003e\n\u003cbr\u003e\n\u003cbr\u003e\nLongest common subsequences(LCS): LCS distance between strings s1 and s2, computed as |s1| +|s2| - 2 * |LCSfunction(s1, s2)| and distance is normalized between 0 and 1.\u003cbr\u003e\n\u003cbr\u003e\nLCSfunction returns the length of Longest Common Subsequence (LCS) between strings s1 and s2.\u003cbr\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n\u003ch2\u003eNotional distance\u003c/h2\u003e\n\u003cbr\u003e\nNotional distance between two numbers X and Y, computed as  abs(X - Y) / abs(x) + abs(Y).\u003cbr\u003e\n\u003cbr\u003e\n\u003ch2\u003eDate Difference\u003c/h2\u003e\n\u003cbr\u003e\nDate Difference gives number of days between two dates(yyyy-MM-dd).\u003cbr\u003e","examples":"","type":"transform","nodeClass":"fire.nodes.ml.NodeDedup","x":"583.648px","y":"50.293px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"confidenceScore","value":"confidenceScore","widget":"textfield","title":"Confidence Score","description":"Confidence Score","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"lhsCols","value":"[\"first_name\",\"last_name\",\"id\",\"err_first_name\",\"err_last_name\"]","widget":"variables_map","title":"LHS Variables","description":"LHS columns for matching","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"rhsCols","value":"[\"err_first_name\",\"err_last_name\",\"\",\"\",\"\"]","widget":"variables_map_select","title":"RHS Variables","description":"RHS columns for matching","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"matchingAlgorithms","value":"[\"levenshtein\",\"levenshtein\",\"\",\"\",\"\"]","widget":"variables_map_array","title":"Algorithm to use","description":"Algorithm to use for matching","optionsArray":["fullmatch","levenshtein","jarowinkler","jaccard(3 gram)","longestCommonSubsequence","notionalDistance","dateDifference"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"matchingWeights","value":"[\"0.5\",\"0.5\",\"\",\"\",\"\"]","widget":"variables_map_edit","title":"Weights","description":"Weights for matches","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputCols","value":"[\"levenshteinScoreFirstName\",\"levenshteinScorelastName\",\"\",\"\",\"\"]","widget":"variables_map_edit","title":"Output Column","description":"Output Column","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"6","name":"PrintNRows","description":"Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output","details":"","examples":"","type":"transform","nodeClass":"fire.nodes.util.NodePrintFirstNRows","x":"852.988px","y":"47.7656px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"title","value":"Row Values","widget":"textfield","title":"Title","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"n","value":"100","widget":"textfield","title":"Num Rows to Print","description":"number of rows to be printed","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"7","name":"Documentation Large","description":"Allows capturing Notes on the Workflow","details":"","examples":"","type":"doc","nodeClass":"fire.nodes.doc.NodeDocLarge","x":"412.986px","y":"568.767px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"comment","value":"\u003ch1\u003eAnalyzing Workflow using Dedup Node\u003c/h1\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eThis workflow finds matching records between 2 given datasets. It first joins them with the columns state. Then it applies distance algorithms on a few fields to find the distance between the records.\u003c/li\u003e\u003c/ul\u003e","widget":"textarea_rich","title":"Comment","description":"Comments for the Workflow","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"8","name":"ReadCSV","description":"It reads in CSV files and creates a DataFrame from it","details":"","examples":"","type":"dataset","nodeClass":"fire.nodes.dataset.NodeDatasetCSV","x":"64.9805px","y":"391.656px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"path","value":"data/dedup/rl/masterdata.csv","widget":"textfield","title":"Path","description":"Path of the Text file/directory","required":true,"display":true,"editable":true,"disableRefresh":false},{"name":"separator","value":",","widget":"textfield","title":"Separator","description":"CSV Separator","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"header","value":"true","widget":"array","title":"Header","description":"Does the file have a header row","optionsArray":["true","false"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"dropMalformed","value":"false","widget":"array","title":"Drop Malformed","description":"Whether to drop Malformed records or error","optionsArray":["true","false"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColNames","value":"[\"first_name\",\"last_name\",\"gender\",\"birth_date\",\"ethnicity\",\"SSN\",\"med_number\",\"state\",\"city\",\"address\",\"zip\",\"id\"]","widget":"schema_col_names","title":"Column Names for the CSV","description":"New Output Columns of the SQL","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColTypes","value":"[\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"INTEGER\",\"DOUBLE\",\"STRING\",\"STRING\",\"STRING\",\"INTEGER\",\"INTEGER\"]","widget":"schema_col_types","title":"Column Types for the CSV","description":"Data Type of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColFormats","value":"[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]","widget":"schema_col_formats","title":"Column Formats for the CSV","description":"Format of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"9","name":"ReadCSV","description":"It reads in CSV files and creates a DataFrame from it","details":"","examples":"","type":"dataset","nodeClass":"fire.nodes.dataset.NodeDatasetCSV","x":"476.98px","y":"382.66px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"path","value":"data/dedup/rl/errordata.csv","widget":"textfield","title":"Path","description":"Path of the Text file/directory","required":true,"display":true,"editable":true,"disableRefresh":false},{"name":"separator","value":",","widget":"textfield","title":"Separator","description":"CSV Separator","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"header","value":"true","widget":"array","title":"Header","description":"Does the file have a header row","optionsArray":["true","false"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"dropMalformed","value":"false","widget":"array","title":"Drop Malformed","description":"Whether to drop Malformed records or error","optionsArray":["true","false"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColNames","value":"[\"err_first_name\",\"err_last_name\",\"gender\",\"birth_date\",\"ethnicity\",\"SSN\",\"med_number\",\"state\",\"city\",\"address\",\"zip\",\"id\"]","widget":"schema_col_names","title":"Column Names for the CSV","description":"New Output Columns of the SQL","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColTypes","value":"[\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"INTEGER\",\"DOUBLE\",\"STRING\",\"STRING\",\"STRING\",\"INTEGER\",\"INTEGER\"]","widget":"schema_col_types","title":"Column Types for the CSV","description":"Data Type of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColFormats","value":"[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]","widget":"schema_col_formats","title":"Column Formats for the CSV","description":"Format of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"}],"edges":[{"source":"3","target":"4","id":1},{"source":"4","target":"5","id":2},{"source":"5","target":"6","id":3},{"source":"8","target":"3","id":4},{"source":"9","target":"3","id":5}],"dataSetDetails":[],"engine":"scala"}